// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dock_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dock_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dock_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dock_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dock_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dock_5fprotocol_2eproto;
namespace DockProtocol {
class DockerList;
struct DockerListDefaultTypeInternal;
extern DockerListDefaultTypeInternal _DockerList_default_instance_;
class ShakeHand;
struct ShakeHandDefaultTypeInternal;
extern ShakeHandDefaultTypeInternal _ShakeHand_default_instance_;
}  // namespace DockProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::DockProtocol::DockerList* Arena::CreateMaybeMessage<::DockProtocol::DockerList>(Arena*);
template<> ::DockProtocol::ShakeHand* Arena::CreateMaybeMessage<::DockProtocol::ShakeHand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DockProtocol {

// ===================================================================

class ShakeHand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DockProtocol.ShakeHand) */ {
 public:
  inline ShakeHand() : ShakeHand(nullptr) {}
  ~ShakeHand() override;
  explicit PROTOBUF_CONSTEXPR ShakeHand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShakeHand(const ShakeHand& from);
  ShakeHand(ShakeHand&& from) noexcept
    : ShakeHand() {
    *this = ::std::move(from);
  }

  inline ShakeHand& operator=(const ShakeHand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShakeHand& operator=(ShakeHand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShakeHand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShakeHand* internal_default_instance() {
    return reinterpret_cast<const ShakeHand*>(
               &_ShakeHand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShakeHand& a, ShakeHand& b) {
    a.Swap(&b);
  }
  inline void Swap(ShakeHand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShakeHand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShakeHand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShakeHand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShakeHand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShakeHand& from) {
    ShakeHand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShakeHand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DockProtocol.ShakeHand";
  }
  protected:
  explicit ShakeHand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIntroFieldNumber = 2,
    kPassFieldNumber = 3,
    kAddressFieldNumber = 5,
    kLimitFieldNumber = 4,
    kPortFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string intro = 2;
  void clear_intro();
  const std::string& intro() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intro(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* intro);
  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(const std::string& value);
  std::string* _internal_mutable_intro();
  public:

  // string pass = 3;
  void clear_pass();
  const std::string& pass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pass();
  PROTOBUF_NODISCARD std::string* release_pass();
  void set_allocated_pass(std::string* pass);
  private:
  const std::string& _internal_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass(const std::string& value);
  std::string* _internal_mutable_pass();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 limit = 4;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 port = 6;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DockProtocol.ShakeHand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intro_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int32_t limit_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dock_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class DockerList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DockProtocol.DockerList) */ {
 public:
  inline DockerList() : DockerList(nullptr) {}
  ~DockerList() override;
  explicit PROTOBUF_CONSTEXPR DockerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DockerList(const DockerList& from);
  DockerList(DockerList&& from) noexcept
    : DockerList() {
    *this = ::std::move(from);
  }

  inline DockerList& operator=(const DockerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DockerList& operator=(DockerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DockerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DockerList* internal_default_instance() {
    return reinterpret_cast<const DockerList*>(
               &_DockerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DockerList& a, DockerList& b) {
    a.Swap(&b);
  }
  inline void Swap(DockerList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DockerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DockerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DockerList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DockerList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DockerList& from) {
    DockerList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DockerList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DockProtocol.DockerList";
  }
  protected:
  explicit DockerList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDockersFieldNumber = 1,
  };
  // repeated .DockProtocol.ShakeHand dockers = 1;
  int dockers_size() const;
  private:
  int _internal_dockers_size() const;
  public:
  void clear_dockers();
  ::DockProtocol::ShakeHand* mutable_dockers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DockProtocol::ShakeHand >*
      mutable_dockers();
  private:
  const ::DockProtocol::ShakeHand& _internal_dockers(int index) const;
  ::DockProtocol::ShakeHand* _internal_add_dockers();
  public:
  const ::DockProtocol::ShakeHand& dockers(int index) const;
  ::DockProtocol::ShakeHand* add_dockers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DockProtocol::ShakeHand >&
      dockers() const;

  // @@protoc_insertion_point(class_scope:DockProtocol.DockerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DockProtocol::ShakeHand > dockers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dock_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShakeHand

// string name = 1;
inline void ShakeHand::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ShakeHand::name() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShakeHand::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.name)
}
inline std::string* ShakeHand::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DockProtocol.ShakeHand.name)
  return _s;
}
inline const std::string& ShakeHand::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ShakeHand::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ShakeHand::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ShakeHand::release_name() {
  // @@protoc_insertion_point(field_release:DockProtocol.ShakeHand.name)
  return _impl_.name_.Release();
}
inline void ShakeHand::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DockProtocol.ShakeHand.name)
}

// string intro = 2;
inline void ShakeHand::clear_intro() {
  _impl_.intro_.ClearToEmpty();
}
inline const std::string& ShakeHand::intro() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.intro)
  return _internal_intro();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShakeHand::set_intro(ArgT0&& arg0, ArgT... args) {
 
 _impl_.intro_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.intro)
}
inline std::string* ShakeHand::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:DockProtocol.ShakeHand.intro)
  return _s;
}
inline const std::string& ShakeHand::_internal_intro() const {
  return _impl_.intro_.Get();
}
inline void ShakeHand::_internal_set_intro(const std::string& value) {
  
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* ShakeHand::_internal_mutable_intro() {
  
  return _impl_.intro_.Mutable(GetArenaForAllocation());
}
inline std::string* ShakeHand::release_intro() {
  // @@protoc_insertion_point(field_release:DockProtocol.ShakeHand.intro)
  return _impl_.intro_.Release();
}
inline void ShakeHand::set_allocated_intro(std::string* intro) {
  if (intro != nullptr) {
    
  } else {
    
  }
  _impl_.intro_.SetAllocated(intro, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.intro_.IsDefault()) {
    _impl_.intro_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DockProtocol.ShakeHand.intro)
}

// string pass = 3;
inline void ShakeHand::clear_pass() {
  _impl_.pass_.ClearToEmpty();
}
inline const std::string& ShakeHand::pass() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.pass)
  return _internal_pass();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShakeHand::set_pass(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pass_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.pass)
}
inline std::string* ShakeHand::mutable_pass() {
  std::string* _s = _internal_mutable_pass();
  // @@protoc_insertion_point(field_mutable:DockProtocol.ShakeHand.pass)
  return _s;
}
inline const std::string& ShakeHand::_internal_pass() const {
  return _impl_.pass_.Get();
}
inline void ShakeHand::_internal_set_pass(const std::string& value) {
  
  _impl_.pass_.Set(value, GetArenaForAllocation());
}
inline std::string* ShakeHand::_internal_mutable_pass() {
  
  return _impl_.pass_.Mutable(GetArenaForAllocation());
}
inline std::string* ShakeHand::release_pass() {
  // @@protoc_insertion_point(field_release:DockProtocol.ShakeHand.pass)
  return _impl_.pass_.Release();
}
inline void ShakeHand::set_allocated_pass(std::string* pass) {
  if (pass != nullptr) {
    
  } else {
    
  }
  _impl_.pass_.SetAllocated(pass, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pass_.IsDefault()) {
    _impl_.pass_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DockProtocol.ShakeHand.pass)
}

// int32 limit = 4;
inline void ShakeHand::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t ShakeHand::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t ShakeHand::limit() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.limit)
  return _internal_limit();
}
inline void ShakeHand::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void ShakeHand::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.limit)
}

// string address = 5;
inline void ShakeHand::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ShakeHand::address() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShakeHand::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.address)
}
inline std::string* ShakeHand::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:DockProtocol.ShakeHand.address)
  return _s;
}
inline const std::string& ShakeHand::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ShakeHand::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ShakeHand::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ShakeHand::release_address() {
  // @@protoc_insertion_point(field_release:DockProtocol.ShakeHand.address)
  return _impl_.address_.Release();
}
inline void ShakeHand::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DockProtocol.ShakeHand.address)
}

// int32 port = 6;
inline void ShakeHand::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t ShakeHand::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ShakeHand::port() const {
  // @@protoc_insertion_point(field_get:DockProtocol.ShakeHand.port)
  return _internal_port();
}
inline void ShakeHand::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void ShakeHand::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:DockProtocol.ShakeHand.port)
}

// -------------------------------------------------------------------

// DockerList

// repeated .DockProtocol.ShakeHand dockers = 1;
inline int DockerList::_internal_dockers_size() const {
  return _impl_.dockers_.size();
}
inline int DockerList::dockers_size() const {
  return _internal_dockers_size();
}
inline void DockerList::clear_dockers() {
  _impl_.dockers_.Clear();
}
inline ::DockProtocol::ShakeHand* DockerList::mutable_dockers(int index) {
  // @@protoc_insertion_point(field_mutable:DockProtocol.DockerList.dockers)
  return _impl_.dockers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DockProtocol::ShakeHand >*
DockerList::mutable_dockers() {
  // @@protoc_insertion_point(field_mutable_list:DockProtocol.DockerList.dockers)
  return &_impl_.dockers_;
}
inline const ::DockProtocol::ShakeHand& DockerList::_internal_dockers(int index) const {
  return _impl_.dockers_.Get(index);
}
inline const ::DockProtocol::ShakeHand& DockerList::dockers(int index) const {
  // @@protoc_insertion_point(field_get:DockProtocol.DockerList.dockers)
  return _internal_dockers(index);
}
inline ::DockProtocol::ShakeHand* DockerList::_internal_add_dockers() {
  return _impl_.dockers_.Add();
}
inline ::DockProtocol::ShakeHand* DockerList::add_dockers() {
  ::DockProtocol::ShakeHand* _add = _internal_add_dockers();
  // @@protoc_insertion_point(field_add:DockProtocol.DockerList.dockers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DockProtocol::ShakeHand >&
DockerList::dockers() const {
  // @@protoc_insertion_point(field_list:DockProtocol.DockerList.dockers)
  return _impl_.dockers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DockProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dock_5fprotocol_2eproto
